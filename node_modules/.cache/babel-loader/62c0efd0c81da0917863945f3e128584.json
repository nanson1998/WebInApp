{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { AppZaloPayConfig } from \"../../lib/config/keys\";\nimport { useFullPaymentStore } from \"./store\";\n\nconst moment = require('moment');\n\nconst queryString = require('query-string');\n\nconst parsed = queryString.parse(window.location.search);\n\nconst CryptoJS = require('crypto-js'); // npm install crypto-js\n// @ts-ignore\n\n\nasync function CreateOrderAPI() {\n  _s();\n\n  const {\n    app,\n    setAppID,\n    appUser,\n    setAppUser,\n    amount,\n    setAmount,\n    embedData,\n    setEmbedData,\n    item,\n    setItem,\n    mac,\n    setMac\n  } = useFullPaymentStore();\n  useEffect(() => {\n    if (typeof parsed.appid === 'string') {\n      setAppID(parsed.appid);\n    }\n\n    if (typeof parsed.appuser === 'string') {\n      setAppUser(parsed.appuser);\n    }\n\n    if (typeof parsed.amount === 'string') {\n      setAmount(parsed.amount);\n    }\n\n    if (typeof parsed.embeddata === 'string') {\n      setEmbedData(parsed.embeddata);\n    }\n\n    if (typeof parsed.item === 'string') {\n      setItem(parsed.item);\n    }\n\n    if (typeof parsed.mac === 'string') {\n      setMac(parsed.mac);\n    }\n  }, []);\n\n  const handleAppOnChange = e => {\n    setAppID(e.target.value);\n  };\n\n  const handleAppUserChange = e => {\n    setAppUser(e.target.value);\n  };\n\n  const handleAppTimeChange = e => {\n    setAppTime(e.target.value);\n  };\n\n  const handleAmountChange = e => {\n    setAmount(e.target.value);\n  };\n\n  const handleEmbedDataChange = e => {\n    setEmbedData(e.target.value);\n  };\n\n  const handleItemChange = e => {\n    setItem(e.target.value);\n  };\n\n  const handleMacChange = e => {\n    setMac(e.target.value);\n  };\n\n  const transID = Math.floor(Math.random() * 1000000); //yyMMdd_xxxx\n\n  const order = {\n    app_id: parseInt(app),\n    app_trans_id: `${moment().format('YYMMDD')}_${transID}`,\n    // translation missing: vi.docs.shared.sample_code.comments.app_trans_id\n    app_user: appUser,\n    app_time: Date.now(),\n    // miliseconds\n    item: item,\n    embed_data: embedData,\n    amount: amount,\n    description: `ZaloPay - Payment for the order #${transID}`,\n    mac: mac\n  }; // appid|app_trans_id|appuser|amount|apptime|embeddata|item\n\n  const data = AppZaloPayConfig.AppId + \"|\" + order.app_trans_id + \"|\" + order.app_user + \"|\" + order.amount + \"|\" + order.app_time + \"|\" + order.embed_data + \"|\" + order.item;\n  order.mac = CryptoJS.HmacSHA256(data, AppZaloPayConfig.Key1).toString();\n\n  try {\n    const response = await axios.post(AppZaloPayConfig.Endpoint, order, {\n      timeout: 3000\n    });\n    return response.data;\n  } catch (err) {\n    console.log(\"err:\", err);\n    return Promise.reject(err);\n  }\n}\n\n_s(CreateOrderAPI, \"fYxoOBU17Ye34adCHduISWJgQW8=\", false, function () {\n  return [useFullPaymentStore];\n});\n\n_c = CreateOrderAPI;\nexport default CreateOrderAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateOrderAPI\");","map":{"version":3,"sources":["/Users/lap12580/Documents/WebviewAndroid/src/components/createorder/create-order.tsx"],"names":["axios","useEffect","AppZaloPayConfig","useFullPaymentStore","moment","require","queryString","parsed","parse","window","location","search","CryptoJS","CreateOrderAPI","app","setAppID","appUser","setAppUser","amount","setAmount","embedData","setEmbedData","item","setItem","mac","setMac","appid","appuser","embeddata","handleAppOnChange","e","target","value","handleAppUserChange","handleAppTimeChange","setAppTime","handleAmountChange","handleEmbedDataChange","handleItemChange","handleMacChange","transID","Math","floor","random","order","app_id","parseInt","app_trans_id","format","app_user","app_time","Date","now","embed_data","description","data","AppId","HmacSHA256","Key1","toString","response","post","Endpoint","timeout","err","console","log","Promise","reject"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect} from \"react\";\nimport {AppZaloPayConfig} from \"../../lib/config/keys\";\nimport { useFullPaymentStore } from \"./store\";\n\nconst moment = require('moment');\nconst queryString = require('query-string');\nconst parsed = queryString.parse(window.location.search);\nconst CryptoJS = require('crypto-js'); // npm install crypto-js\n// @ts-ignore\nasync function CreateOrderAPI(): Promise<any> {\n    const { app, setAppID, appUser, setAppUser, amount, setAmount, embedData, setEmbedData, item, setItem, mac, setMac} = useFullPaymentStore();\n    useEffect(() => {\n\n        if (typeof parsed.appid === 'string') {\n            setAppID(parsed.appid)\n        }\n        if (typeof parsed.appuser === 'string') {\n            setAppUser(parsed.appuser)\n        }\n        if (typeof parsed.amount === 'string') {\n            setAmount(parsed.amount)\n        }\n        if (typeof parsed.embeddata === 'string') {\n            setEmbedData(parsed.embeddata)\n        }\n        if (typeof parsed.item === 'string') {\n            setItem(parsed.item)\n        }\n        if (typeof parsed.mac === 'string') {\n            setMac(parsed.mac)\n        }\n    }, [])\n\n    const handleAppOnChange = (e: any) => {\n        setAppID(e.target.value);\n    };\n\n    const handleAppUserChange = (e: any) => {\n        setAppUser(e.target.value);\n    };\n\n    const handleAppTimeChange = (e: any) => {\n        setAppTime(e.target.value);\n    };\n\n    const handleAmountChange = (e: any) => {\n        setAmount(e.target.value);\n    };\n\n\n    const handleEmbedDataChange = (e: any) => {\n        setEmbedData(e.target.value);\n    };\n\n    const handleItemChange = (e: any) => {\n        setItem(e.target.value);\n    };\n\n    const handleMacChange = (e: any) => {\n        setMac(e.target.value);\n    };\n\n    const transID = Math.floor(Math.random() * 1000000); //yyMMdd_xxxx\n    const order = {\n        app_id: parseInt(app),\n        app_trans_id: `${moment().format('YYMMDD')}_${transID}`, // translation missing: vi.docs.shared.sample_code.comments.app_trans_id\n        app_user: appUser,\n        app_time: Date.now(), // miliseconds\n        item: item,\n        embed_data: embedData,\n        amount:amount,\n        description: `ZaloPay - Payment for the order #${transID}`,\n        mac: mac,\n    };\n\n    // appid|app_trans_id|appuser|amount|apptime|embeddata|item\n    const data = AppZaloPayConfig.AppId + \"|\" + order.app_trans_id + \"|\" + order.app_user + \"|\" + order.amount + \"|\" + order.app_time + \"|\" + order.embed_data + \"|\" + order.item;\n    order.mac = CryptoJS.HmacSHA256(data, AppZaloPayConfig.Key1).toString();\n\n    try {\n        const response = await axios.post(AppZaloPayConfig.Endpoint, order, {timeout: 3000});\n\n        return response.data;\n    } catch (err) {\n        console.log(\"err:\", err)\n        return Promise.reject(err);\n    }\n}\n\nexport default CreateOrderAPI;\n"]},"metadata":{},"sourceType":"module"}