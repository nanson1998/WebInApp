{"ast":null,"code":"import axios from \"axios\";\nimport { AppZaloPayConfig } from \"../../lib/config/keys\";\n\nconst moment = require('moment');\n\nconst queryString = require('query-string');\n\nconst parsed = queryString.parse(window.location.search);\n\nconst CryptoJS = require('crypto-js'); // npm install crypto-js\n// @ts-ignore\n\n\nfunction CreateOrderAPI() {\n  // const { app, setAppID, appUser, setAppUser, amount, setAmount, embedData, setEmbedData, item, setItem, mac, setMac} = useFullPaymentStore();\n  // useEffect(() => {\n  //\n  //     if (typeof parsed.appid === 'string') {\n  //         setAppID(parsed.appid)\n  //     }\n  //     if (typeof parsed.appuser === 'string') {\n  //         setAppUser(parsed.appuser)\n  //     }\n  //     if (typeof parsed.amount === 'string') {\n  //         setAmount(parsed.amount)\n  //     }\n  //     if (typeof parsed.embeddata === 'string') {\n  //         setEmbedData(parsed.embeddata)\n  //     }\n  //     if (typeof parsed.item === 'string') {\n  //         setItem(parsed.item)\n  //     }\n  //     if (typeof parsed.mac === 'string') {\n  //         setMac(parsed.mac)\n  //     }\n  // }, [])\n  //\n  // const handleAppOnChange = (e: any) => {\n  //     setAppID(e.target.value);\n  // };\n  //\n  // const handleAppUserChange = (e: any) => {\n  //     setAppUser(e.target.value);\n  // };\n  //\n  // const handleAmountChange = (e: any) => {\n  //     setAmount(e.target.value);\n  // };\n  //\n  //\n  // const handleEmbedDataChange = (e: any) => {\n  //     setEmbedData(e.target.value);\n  // };\n  //\n  // const handleItemChange = (e: any) => {\n  //     setItem(e.target.value);\n  // };\n  //\n  // const handleMacChange = (e: any) => {\n  //     setMac(e.target.value);\n  // };\n  const transID = Math.floor(Math.random() * 1000000); //yyMMdd_xxxx\n\n  const order = {\n    app_id: AppZaloPayConfig.AppId,\n    app_trans_id: `${moment().format('YYMMDD')}_${transID}`,\n    // translation missing: vi.docs.shared.sample_code.comments.app_trans_id\n    app_user: \"user123\",\n    app_time: Date.now(),\n    // miliseconds\n    item: '[]',\n    embed_data: '{}',\n    amount: 50000,\n    description: `ZaloPay - Payment for the order #${transID}`,\n    bank_code: \"zalopayapp\",\n    mac: \"\"\n  }; // appid|app_trans_id|appuser|amount|apptime|embeddata|item\n\n  const data = AppZaloPayConfig.AppId + \"|\" + order.app_trans_id + \"|\" + order.app_user + \"|\" + order.amount + \"|\" + order.app_time + \"|\" + order.embed_data + \"|\" + order.item;\n  order.mac = CryptoJS.HmacSHA256(data, AppZaloPayConfig.Key1).toString();\n\n  try {\n    const response = async () => {\n      await axios.post(AppZaloPayConfig.Endpoint, order, {\n        timeout: 3000\n      }).then(data => {\n        return data;\n      });\n    };\n\n    return response;\n  } catch (err) {\n    console.log(\"err:\", err);\n    return err;\n  }\n}\n\n_c = CreateOrderAPI;\nexport default CreateOrderAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateOrderAPI\");","map":{"version":3,"sources":["/Users/lap12580/Documents/WebviewAndroid/src/components/createorder/create-order.tsx"],"names":["axios","AppZaloPayConfig","moment","require","queryString","parsed","parse","window","location","search","CryptoJS","CreateOrderAPI","transID","Math","floor","random","order","app_id","AppId","app_trans_id","format","app_user","app_time","Date","now","item","embed_data","amount","description","bank_code","mac","data","HmacSHA256","Key1","toString","response","post","Endpoint","timeout","then","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,gBAAR,QAA+B,uBAA/B;;AAKA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAME,MAAM,GAAGD,WAAW,CAACE,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAlC,CAAf;;AACA,MAAMC,QAAQ,GAAGP,OAAO,CAAC,WAAD,CAAxB,C,CAAuC;AACvC;;;AACA,SAASQ,cAAT,GAA0B;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAhB,CAjDsB,CAiD+B;;AACrD,QAAMC,KAAK,GAAG;AACVC,IAAAA,MAAM,EAAEhB,gBAAgB,CAACiB,KADf;AAEVC,IAAAA,YAAY,EAAG,GAAEjB,MAAM,GAAGkB,MAAT,CAAgB,QAAhB,CAA0B,IAAGR,OAAQ,EAF5C;AAE+C;AACzDS,IAAAA,QAAQ,EAAE,SAHA;AAIVC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,EAJA;AAIY;AACtBC,IAAAA,IAAI,EAAE,IALI;AAMVC,IAAAA,UAAU,EAAE,IANF;AAOVC,IAAAA,MAAM,EAAE,KAPE;AAQVC,IAAAA,WAAW,EAAG,oCAAmChB,OAAQ,EAR/C;AASViB,IAAAA,SAAS,EAAE,YATD;AAUVC,IAAAA,GAAG,EAAE;AAVK,GAAd,CAlDsB,CA8DtB;;AACA,QAAMC,IAAI,GAAG9B,gBAAgB,CAACiB,KAAjB,GAAyB,GAAzB,GAA+BF,KAAK,CAACG,YAArC,GAAoD,GAApD,GAA0DH,KAAK,CAACK,QAAhE,GAA2E,GAA3E,GAAiFL,KAAK,CAACW,MAAvF,GAAgG,GAAhG,GAAsGX,KAAK,CAACM,QAA5G,GAAuH,GAAvH,GAA6HN,KAAK,CAACU,UAAnI,GAAgJ,GAAhJ,GAAsJV,KAAK,CAACS,IAAzK;AACAT,EAAAA,KAAK,CAACc,GAAN,GAAYpB,QAAQ,CAACsB,UAAT,CAAoBD,IAApB,EAA0B9B,gBAAgB,CAACgC,IAA3C,EAAiDC,QAAjD,EAAZ;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAG,YAAW;AACxB,YAAMnC,KAAK,CAACoC,IAAN,CAAWnC,gBAAgB,CAACoC,QAA5B,EAAsCrB,KAAtC,EAA6C;AAACsB,QAAAA,OAAO,EAAE;AAAV,OAA7C,EAAgEC,IAAhE,CAAsER,IAAD,IAAU;AACjF,eAAOA,IAAP;AACH,OAFK,CAAN;AAGH,KAJD;;AAKA,WAAOI,QAAP;AACH,GAPD,CAOE,OAAOK,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACA,WAAOA,GAAP;AACH;AAEJ;;KA9EQ7B,c;AAgFT,eAAeA,cAAf","sourcesContent":["import axios from \"axios\";\nimport React, {useEffect,useState} from \"react\";\nimport {AppZaloPayConfig} from \"../../lib/config/keys\";\nimport { useFullPaymentStore } from \"./store\";\nimport {Grid} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nconst moment = require('moment');\nconst queryString = require('query-string');\nconst parsed = queryString.parse(window.location.search);\nconst CryptoJS = require('crypto-js'); // npm install crypto-js\n// @ts-ignore\nfunction CreateOrderAPI() {\n    // const { app, setAppID, appUser, setAppUser, amount, setAmount, embedData, setEmbedData, item, setItem, mac, setMac} = useFullPaymentStore();\n    // useEffect(() => {\n    //\n    //     if (typeof parsed.appid === 'string') {\n    //         setAppID(parsed.appid)\n    //     }\n    //     if (typeof parsed.appuser === 'string') {\n    //         setAppUser(parsed.appuser)\n    //     }\n    //     if (typeof parsed.amount === 'string') {\n    //         setAmount(parsed.amount)\n    //     }\n    //     if (typeof parsed.embeddata === 'string') {\n    //         setEmbedData(parsed.embeddata)\n    //     }\n    //     if (typeof parsed.item === 'string') {\n    //         setItem(parsed.item)\n    //     }\n    //     if (typeof parsed.mac === 'string') {\n    //         setMac(parsed.mac)\n    //     }\n    // }, [])\n    //\n    // const handleAppOnChange = (e: any) => {\n    //     setAppID(e.target.value);\n    // };\n    //\n    // const handleAppUserChange = (e: any) => {\n    //     setAppUser(e.target.value);\n    // };\n    //\n    // const handleAmountChange = (e: any) => {\n    //     setAmount(e.target.value);\n    // };\n    //\n    //\n    // const handleEmbedDataChange = (e: any) => {\n    //     setEmbedData(e.target.value);\n    // };\n    //\n    // const handleItemChange = (e: any) => {\n    //     setItem(e.target.value);\n    // };\n    //\n    // const handleMacChange = (e: any) => {\n    //     setMac(e.target.value);\n    // };\n\n    const transID = Math.floor(Math.random() * 1000000); //yyMMdd_xxxx\n    const order = {\n        app_id: AppZaloPayConfig.AppId,\n        app_trans_id: `${moment().format('YYMMDD')}_${transID}`, // translation missing: vi.docs.shared.sample_code.comments.app_trans_id\n        app_user: \"user123\",\n        app_time: Date.now(), // miliseconds\n        item: '[]',\n        embed_data: '{}',\n        amount: 50000,\n        description: `ZaloPay - Payment for the order #${transID}`,\n        bank_code: \"zalopayapp\",\n        mac: \"\",\n    };\n    // appid|app_trans_id|appuser|amount|apptime|embeddata|item\n    const data = AppZaloPayConfig.AppId + \"|\" + order.app_trans_id + \"|\" + order.app_user + \"|\" + order.amount + \"|\" + order.app_time + \"|\" + order.embed_data + \"|\" + order.item;\n    order.mac = CryptoJS.HmacSHA256(data, AppZaloPayConfig.Key1).toString();\n\n    try {\n        const response = async() => {\n            await axios.post(AppZaloPayConfig.Endpoint, order, {timeout: 3000})  .then((data) => {\n                return data\n            })\n        };\n        return response;\n    } catch (err) {\n        console.log(\"err:\", err)\n        return err;\n    }\n\n}\n\nexport default CreateOrderAPI;\n"]},"metadata":{},"sourceType":"module"}